#include <bits/stdc++.h>

using namespace std;

struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(NULL) {}
};

ListNode* twoMergedLists(ListNode* list1, ListNode* list2)
{
    // create a dummy
    ListNode* dummy = new ListNode(0);
    // create a pointer
    ListNode* current = dummy;
    // iterate until one of them becomes empty
    while (list1 != NULL && list2 != NULL)
    {
        // compare and append
        if (list1->val <= list2->val)
        {
            current->next = list1;
            list1 = list1->next;
        }
        else 
        {
            current->next = list2;
            list2 = list2->next;
        }
        current = current->next;
    }
    // append the remaining nodes 
    if (list1 != NULL)
    {
        current->next = list1;
    }
    else 
    {
        current->next = list2;
    }
    
    //Store the head of merged list
    ListNode* mergedList = dummy->next;
    
    //delete dummy-
    delete dummy;
    
    return mergedList;
}

int main()
{
    // create list1
    ListNode* list1 = new ListNode(1);
    list1->next = new ListNode(2);
    list1->next->next = new ListNode(4);
    
    ListNode* list2 = new ListNode(1);
    list2->next = new ListNode(3);
    list2->next->next = new ListNode(4);
    
    //merge List
    ListNode* mergedList = twoMergedLists(list1, list2);
    
    //print the list
    ListNode* current = mergedList;
    while(current != NULL)
    {
        cout << current->val << " ";
        current = current->next;
    }
    cout << endl;
    
    //clean up the memory
    delete list1;
    delete list2;
    
    //delete merged list 
    while (mergedList != NULL)
    {
        current = mergedList;
        mergedList = mergedList->next;
        delete current;
    }
    
    return 0;
}




#include <bits/stdc++.h>

using namespace std;

struct ListNode
{
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(NULL) {}
};

ListNode* threeMergedList(ListNode* list1, ListNode* list2, ListNode* list3)
{
    ListNode* dummy = new ListNode(0);
    ListNode* current = dummy;
    
    while (list1 != NULL || list2 != NULL || list3 != NULL)
    {
        if (list1 != NULL && (list2 == NULL || list1->val <= list2->val) && (list3 == NULL || list1->val <= list3->val))
        {
            current->next = list1;
            list1 = list1->next;
        }
        else if (list2 != NULL && (list3 == NULL || list2->val <= list3->val))
        {
            current->next = list2;
            list2 = list2->next;
        }
        else
        {
            current->next = list3;
            list3 = list3->next;
        }
        current = current->next;
    }
    
    ListNode* mergedList = dummy->next;
    delete dummy;
    return mergedList;
}

int main()
{
    ListNode* list1 = new ListNode(1);
    list1->next = new ListNode(2);
    list1->next->next = new ListNode(4);
    
    ListNode* list2 = new ListNode(1);
    list2->next = new ListNode(3);
    list2->next->next = new ListNode(4);
    
    ListNode* list3 = new ListNode(2);
    list3->next = new ListNode(4);
    list3->next->next = new ListNode(6);
    
    ListNode* mergedList = threeMergedList(list1, list2, list3);
    
    ListNode* current = mergedList;
    while(current != NULL)
    {
        cout << current->val << " ";
        current = current->next;
    }
    cout << endl;
    
    // clean up the memory
    current = mergedList;
    while (current != NULL)
    {
        ListNode* temp = current;
        current = current->next;
        delete temp;
    }
    
    return 0;
}
















